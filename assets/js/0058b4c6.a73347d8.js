"use strict";(self.webpackChunkrytass=self.webpackChunkrytass||[]).push([[849],{5424:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Home","href":"/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"CMS Base NestJS Module","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Configuration","href":"/docs/cms-base-nestjs-module/configuration","docId":"cms-base-nestjs-module/configuration","unlisted":false},{"type":"link","label":"ArticleBaseService","href":"/docs/cms-base-nestjs-module/article-base-service","docId":"cms-base-nestjs-module/article-base-service","unlisted":false},{"type":"link","label":"Customize Entities","href":"/docs/cms-base-nestjs-module/custom-entity","docId":"cms-base-nestjs-module/custom-entity","unlisted":false}],"href":"/docs/category/cms-base-nestjs-module"}]},"docs":{"cms-base-nestjs-module/article-base-service":{"id":"cms-base-nestjs-module/article-base-service","title":"ArticleBaseService","description":"ArticleBaseService provides fundamental article operation functionalities, including creating new articles, adding versions, and searching for articles.","sidebar":"tutorialSidebar"},"cms-base-nestjs-module/configuration":{"id":"cms-base-nestjs-module/configuration","title":"Configuration","description":"This is a NestJS module that serves as the core of a content management platform, supporting basic features such as article versioning and categorization. The storage of article content uses Quadrats as the core storage system and requires TypeORM for database interfacing. Of course, you are free to define the necessary Entity Columns on all stored tables.","sidebar":"tutorialSidebar"},"cms-base-nestjs-module/custom-entity":{"id":"cms-base-nestjs-module/custom-entity","title":"Customize Entities","description":"You can extend the fields of articles and categories through the TypeORM ChildEntity mechanism. Below, we provide some examples to illustrate how to add a boolean field when you want to record whether an article should be published.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Home","description":"","sidebar":"tutorialSidebar"}}}}')}}]);