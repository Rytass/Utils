# Rytass Utils - HwaNan Bank Payment Adapter

## Package Information
- **Package**: `@rytass/payments-adapter-hwanan`
- **Version**: 0.1.3
- **Description**: Comprehensive TypeScript payment adapter for HwaNan Bank payment services, providing secure credit card processing with Taiwan banking integration
- **Author**: Chia Yu Pai <fantasyatelier@gmail.com>
- **License**: MIT
- **Repository**: https://github.com/Rytass/Utils

## Overview
This adapter provides seamless integration with HwaNan Bank's payment platform, offering secure credit card transaction processing with built-in callback server support, real-time order management, and comprehensive payment lifecycle handling specifically designed for Taiwan's banking ecosystem.

## Installation
```bash
npm install @rytass/payments-adapter-hwanan
# or
yarn add @rytass/payments-adapter-hwanan
```

## Dependencies
- `@rytass/payments`: ^0.2.2
- `axios`: ^1.7.8
- `luxon`: ^3.5.0

## Peer Dependencies
None required.

## Key Features
- ✅ HwaNan Bank credit card payment processing
- ✅ Built-in callback server with webhook handling
- ✅ Real-time transaction processing and status tracking
- ✅ Order lifecycle management with event-driven architecture
- ✅ Secure transaction handling with bank-grade security
- ✅ Refund and reversal operations
- ✅ Production and test environment support
- ✅ TypeScript type safety throughout
- ✅ Comprehensive error handling and logging
- ✅ Integration with Taiwan banking infrastructure

## Basic Usage

### Simple Credit Card Payment
```typescript
import { 
  HwaNanPayment,
  HwaNanChannel 
} from '@rytass/payments-adapter-hwanan';
import { PaymentEvents } from '@rytass/payments';

const payment = new HwaNanPayment({
  merchantId: 'YOUR_HWANAN_MERCHANT_ID',
  terminalId: 'YOUR_TERMINAL_ID',
  merID: 'YOUR_MER_ID',
  merchantName: 'Your Store Name',
  identifier: 'YOUR_IDENTIFIER',
  withServer: true,
  onCommit: (order) => {
    console.log('HwaNan payment committed:', order);
  },
  onFailed: (order) => {
    console.log('HwaNan payment failed:', order);
  }
});

// Create credit card payment order
const order = await payment.prepare({
  channel: HwaNanChannel.CREDIT_CARD,
  items: [
    {
      name: 'Premium Service',
      unitPrice: 2500,
      quantity: 1
    }
  ],
  description: 'Online Purchase',
  email: 'customer@example.com'
});

console.log('Order ID:', order.id);
console.log('Checkout URL:', order.checkoutURL);
console.log('Total Amount:', order.totalPrice);
```

### Event Handling
```typescript
// Handle payment success
payment.emitter.on(PaymentEvents.ORDER_COMMITTED, (message) => {
  console.log('Payment committed successfully:', message);
  console.log('Transaction ID:', message.transactionId);
  console.log('Amount:', message.totalPrice);
  console.log('Committed At:', message.committedAt);
  
  // Your business logic here
  handleSuccessfulPayment(message);
});

// Handle payment failure
payment.emitter.on(PaymentEvents.ORDER_FAILED, (failure) => {
  console.error('Payment failed:', failure);
  console.error('Error Code:', failure.code);
  console.error('Error Message:', failure.message);
  
  // Handle payment failure
  handleFailedPayment(failure);
});

// Handle order creation
payment.emitter.on(PaymentEvents.ORDER_PRE_COMMIT, (order) => {
  console.log('Order created and ready for payment:', order.id);
});
```

## Configuration Options

### HwaNanPaymentInitOptions
| Property | Type | Required | Default | Description |
|----------|------|----------|---------|-------------|
| `merchantId` | `string` | Yes | - | HwaNan Bank Merchant ID |
| `terminalId` | `string` | Yes | - | Terminal ID for transactions |
| `merID` | `string` | Yes | - | Merchant Identifier |
| `merchantName` | `string` | Yes | - | Merchant display name |
| `identifier` | `string` | Yes | - | Unique identifier for API authentication |
| `withServer` | `boolean` | No | `false` | Enable built-in callback server |
| `onCommit` | `function` | No | - | Callback when payment commits |
| `onFailed` | `function` | No | - | Callback when payment fails |

### Environment Configuration
```typescript
// Production environment
const productionPayment = new HwaNanPayment({
  merchantId: process.env.HWANAN_MERCHANT_ID!,
  terminalId: process.env.HWANAN_TERMINAL_ID!,
  merID: process.env.HWANAN_MER_ID!,
  merchantName: process.env.HWANAN_MERCHANT_NAME!,
  identifier: process.env.HWANAN_IDENTIFIER!,
  withServer: true
});

// Test environment  
const testPayment = new HwaNanPayment({
  merchantId: 'TEST_MERCHANT_ID',
  terminalId: 'TEST_TERMINAL_ID',
  merID: 'TEST_MER_ID',
  merchantName: 'Test Store',
  identifier: 'TEST_IDENTIFIER',
  withServer: true
});
```

## Payment Channels

### Available Channels
```typescript
enum HwaNanChannel {
  CREDIT_CARD = 'CREDIT_CARD'
}

// Channel usage
const order = await payment.prepare({
  channel: HwaNanChannel.CREDIT_CARD,
  items: [
    {
      name: 'Product Name',
      unitPrice: 1500,
      quantity: 1
    }
  ]
});
```

## Order Management

### Order Query
```typescript
// Query order status
const orderStatus = await payment.query('ORDER-2024-001');

console.log('Order ID:', orderStatus.id);
console.log('State:', orderStatus.state);
console.log('Total Price:', orderStatus.totalPrice);
console.log('Created At:', orderStatus.createdAt);
console.log('Committed At:', orderStatus.committedAt);
console.log('Is Committed:', orderStatus.isCommitted);
console.log('Is Failed:', orderStatus.isFailed);

// Check additional payment information
if (orderStatus.additionalInfo) {
  console.log('Transaction ID:', orderStatus.additionalInfo.transactionId);
  console.log('Payment Method:', orderStatus.additionalInfo.paymentMethod);
  console.log('Bank Response:', orderStatus.additionalInfo.bankResponse);
}
```

### Order States
```typescript
import { OrderState } from '@rytass/payments';

// Available order states
OrderState.INITED        // Order initialized
OrderState.PRE_COMMIT    // Order created, awaiting payment
OrderState.COMMITTED     // Payment completed successfully
OrderState.FAILED        // Payment failed
OrderState.REFUNDED      // Payment refunded
```

## Error Handling
```typescript
try {
  const order = await payment.prepare({
    channel: HwaNanChannel.CREDIT_CARD,
    items: [{
      name: 'Test Product',
      unitPrice: 1000,
      quantity: 1
    }]
  });
} catch (error) {
  // Handle specific error types
  if (error.message.includes('Invalid merchant ID')) {
    console.error('Merchant configuration is incorrect');
  } else if (error.message.includes('Invalid terminal ID')) {
    console.error('Terminal ID is not valid');
  } else if (error.message.includes('Amount too low')) {
    console.error('Transaction amount below minimum threshold');
  } else if (error.message.includes('Amount too high')) {
    console.error('Transaction amount exceeds maximum limit');
  } else {
    console.error('Payment preparation failed:', error.message);
  }
}

// Query error handling
try {
  const order = await payment.query('INVALID-ORDER-ID');
} catch (error) {
  if (error.message.includes('Order not found')) {
    console.error('Order does not exist in the system');
  } else {
    console.error('Order query failed:', error.message);
  }
}
```

## Integration Examples

### Express.js Integration
```typescript
import express from 'express';
import { HwaNanPayment, HwaNanChannel } from '@rytass/payments-adapter-hwanan';
import { PaymentEvents } from '@rytass/payments';

const app = express();
app.use(express.json());

const paymentGateway = new HwaNanPayment({
  merchantId: process.env.HWANAN_MERCHANT_ID!,
  terminalId: process.env.HWANAN_TERMINAL_ID!,
  merID: process.env.HWANAN_MER_ID!,
  merchantName: process.env.HWANAN_MERCHANT_NAME!,
  identifier: process.env.HWANAN_IDENTIFIER!,
  withServer: true
});

// Global event handling
paymentGateway.emitter.on(PaymentEvents.ORDER_COMMITTED, async (message) => {
  console.log(`HwaNan payment committed: ${message.id}`);
  
  // Update database
  await updateOrderStatus(message.id, 'paid');
  
  // Send confirmation email
  await sendPaymentConfirmation(message.id, {
    amount: message.totalPrice,
    transactionId: message.transactionId
  });
});

// Create payment endpoint
app.post('/api/hwanan-payment', async (req, res) => {
  try {
    const { items, description, email } = req.body;
    
    const order = await paymentGateway.prepare({
      channel: HwaNanChannel.CREDIT_CARD,
      items: items.map(item => ({
        name: item.name,
        unitPrice: item.price,
        quantity: item.quantity
      })),
      description,
      email
    });
    
    res.json({
      success: true,
      orderId: order.id,
      checkoutUrl: order.checkoutURL,
      totalAmount: order.totalPrice,
      merchantName: process.env.HWANAN_MERCHANT_NAME
    });
  } catch (error) {
    res.status(400).json({
      success: false,
      error: error.message
    });
  }
});

// Query payment status
app.get('/api/hwanan-payment/:orderId', async (req, res) => {
  try {
    const { orderId } = req.params;
    const order = await paymentGateway.query(orderId);
    
    res.json({
      success: true,
      order: {
        id: order.id,
        state: order.state,
        totalAmount: order.totalPrice,
        isCommitted: order.isCommitted,
        isFailed: order.isFailed,
        createdAt: order.createdAt,
        committedAt: order.committedAt,
        transactionId: order.additionalInfo?.transactionId
      }
    });
  } catch (error) {
    res.status(404).json({
      success: false,
      error: 'Order not found'
    });
  }
});

app.listen(3000, () => {
  console.log('HwaNan payment server running on port 3000');
});
```

### NestJS Service Integration
```typescript
import { Injectable, Logger } from '@nestjs/common';
import { HwaNanPayment, HwaNanChannel } from '@rytass/payments-adapter-hwanan';
import { PaymentEvents, OrderState } from '@rytass/payments';

@Injectable()
export class HwaNanPaymentService {
  private readonly logger = new Logger(HwaNanPaymentService.name);
  private readonly paymentGateway: HwaNanPayment;
  
  constructor() {
    this.paymentGateway = new HwaNanPayment({
      merchantId: process.env.HWANAN_MERCHANT_ID!,
      terminalId: process.env.HWANAN_TERMINAL_ID!,
      merID: process.env.HWANAN_MER_ID!,
      merchantName: process.env.HWANAN_MERCHANT_NAME!,
      identifier: process.env.HWANAN_IDENTIFIER!,
      withServer: true
    });
    
    this.setupEventHandlers();
  }
  
  private setupEventHandlers() {
    this.paymentGateway.emitter.on(PaymentEvents.ORDER_COMMITTED, (message) => {
      this.logger.log(`HwaNan payment committed: ${message.id}`);
      this.handlePaymentSuccess(message);
    });
    
    this.paymentGateway.emitter.on(PaymentEvents.ORDER_FAILED, (failure) => {
      this.logger.error(`HwaNan payment failed: ${failure.code} - ${failure.message}`);
      this.handlePaymentFailure(failure);
    });
  }
  
  async createPayment(paymentData: {
    items: Array<{
      name: string;
      price: number;
      quantity: number;
    }>;
    description?: string;
    email?: string;
  }) {
    const order = await this.paymentGateway.prepare({
      channel: HwaNanChannel.CREDIT_CARD,
      items: paymentData.items.map(item => ({
        name: item.name,
        unitPrice: item.price,
        quantity: item.quantity
      })),
      description: paymentData.description,
      email: paymentData.email
    });
    
    return {
      orderId: order.id,
      checkoutUrl: order.checkoutURL,
      totalAmount: order.totalPrice,
      state: order.state,
      createdAt: order.createdAt
    };
  }
  
  async getPaymentStatus(orderId: string) {
    const order = await this.paymentGateway.query(orderId);
    
    return {
      orderId: order.id,
      state: order.state,
      totalAmount: order.totalPrice,
      isCommitted: order.state === OrderState.COMMITTED,
      isFailed: order.state === OrderState.FAILED,
      createdAt: order.createdAt,
      committedAt: order.committedAt,
      transactionId: order.additionalInfo?.transactionId
    };
  }
  
  private async handlePaymentSuccess(message: any) {
    // Implement your business logic
    this.logger.log(`Processing successful payment for order: ${message.id}`);
    
    // Update order in database
    // Send notifications
    // Trigger business workflows
  }
  
  private async handlePaymentFailure(failure: any) {
    // Handle payment failure
    this.logger.error(`Processing payment failure: ${failure.code} - ${failure.message}`);
    
    // Log for investigation
    // Notify customer service
    // Send failure notifications
  }
}
```

### React Payment Component
```typescript
import React, { useState } from 'react';

interface HwaNanPaymentProps {
  items: Array<{
    name: string;
    price: number;
    quantity: number;
  }>;
  merchantName: string;
  onSuccess: (orderId: string) => void;
  onError: (error: string) => void;
}

const HwaNanPaymentComponent: React.FC<HwaNanPaymentProps> = ({
  items,
  merchantName,
  onSuccess,
  onError
}) => {
  const [loading, setLoading] = useState(false);
  const [email, setEmail] = useState('');
  
  const totalAmount = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  
  const handlePayment = async () => {
    if (!email || !email.includes('@')) {
      onError('Please provide a valid email address');
      return;
    }
    
    setLoading(true);
    
    try {
      const response = await fetch('/api/hwanan-payment', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          items,
          description: `Payment for ${items.length} item(s)`,
          email
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        // Redirect to HwaNan payment page
        window.location.href = data.checkoutUrl;
      } else {
        onError(data.error);
      }
    } catch (error) {
      onError('Payment creation failed. Please try again.');
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <div className="hwanan-payment">
      <h3>HwaNan Bank Payment</h3>
      <p>Merchant: {merchantName}</p>
      
      <div className="payment-items">
        <h4>Order Summary</h4>
        {items.map((item, index) => (
          <div key={index} className="payment-item">
            <span className="item-name">{item.name}</span>
            <span className="item-quantity">x{item.quantity}</span>
            <span className="item-price">NT${item.price}</span>
          </div>
        ))}
      </div>
      
      <div className="payment-total">
        <strong>Total: NT${totalAmount}</strong>
      </div>
      
      <div className="customer-info">
        <label htmlFor="email">Email Address:</label>
        <input
          type="email"
          id="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          placeholder="your.email@example.com"
          required
          disabled={loading}
        />
      </div>
      
      <button 
        onClick={handlePayment}
        disabled={loading || !email}
        className="pay-button hwanan-button"
      >
        {loading ? 'Processing...' : 'Pay with HwaNan Bank'}
      </button>
      
      <div className="payment-info">
        <small>
          You will be redirected to HwaNan Bank's secure payment page.
          Supported cards: VISA, MasterCard, JCB
        </small>
      </div>
    </div>
  );
};

export default HwaNanPaymentComponent;
```

## Testing

### Unit Testing
```typescript
import { HwaNanPayment, HwaNanChannel } from '@rytass/payments-adapter-hwanan';
import { OrderState } from '@rytass/payments';

describe('HwaNan Bank Payment Integration', () => {
  let paymentGateway: HwaNanPayment;
  
  beforeEach(() => {
    paymentGateway = new HwaNanPayment({
      merchantId: 'TEST_MERCHANT',
      terminalId: 'TEST_TERMINAL',
      merID: 'TEST_MER_ID',
      merchantName: 'Test Store',
      identifier: 'TEST_IDENTIFIER',
      withServer: false
    });
  });
  
  it('should create payment order successfully', async () => {
    const order = await paymentGateway.prepare({
      channel: HwaNanChannel.CREDIT_CARD,
      items: [{
        name: 'Test Product',
        unitPrice: 1500,
        quantity: 1
      }],
      description: 'Test payment',
      email: 'test@example.com'
    });
    
    expect(order.id).toBeDefined();
    expect(order.totalPrice).toBe(1500);
    expect(order.state).toBe(OrderState.PRE_COMMIT);
    expect(order.checkoutURL).toContain('hwanan');
  });
  
  it('should query order status', async () => {
    // First create an order
    const order = await paymentGateway.prepare({
      channel: HwaNanChannel.CREDIT_CARD,
      items: [{
        name: 'Query Test Product',
        unitPrice: 2000,
        quantity: 1
      }]
    });
    
    // Then query it
    const queriedOrder = await paymentGateway.query(order.id);
    
    expect(queriedOrder.id).toBe(order.id);
    expect(queriedOrder.totalPrice).toBe(2000);
    expect(queriedOrder.state).toBe(OrderState.PRE_COMMIT);
  });
  
  it('should handle invalid order query', async () => {
    await expect(paymentGateway.query('INVALID-ORDER-ID'))
      .rejects.toThrow('Order not found');
  });
});
```

### Integration Testing
```typescript
import request from 'supertest';
import app from '../app'; // Your Express app

describe('HwaNan Payment API', () => {
  it('should create payment order via API', async () => {
    const response = await request(app)
      .post('/api/hwanan-payment')
      .send({
        items: [
          {
            name: 'API Test Product',
            price: 1000,
            quantity: 2
          }
        ],
        description: 'API Test Payment',
        email: 'test@example.com'
      })
      .expect(200);
    
    expect(response.body.success).toBe(true);
    expect(response.body.orderId).toBeDefined();
    expect(response.body.totalAmount).toBe(2000);
    expect(response.body.checkoutUrl).toContain('hwanan');
  });
  
  it('should query payment status via API', async () => {
    // First create a payment
    const createResponse = await request(app)
      .post('/api/hwanan-payment')
      .send({
        items: [{ name: 'Status Test', price: 500, quantity: 1 }],
        email: 'status@example.com'
      });
    
    const orderId = createResponse.body.orderId;
    
    // Then query its status
    const statusResponse = await request(app)
      .get(`/api/hwanan-payment/${orderId}`)
      .expect(200);
    
    expect(statusResponse.body.success).toBe(true);
    expect(statusResponse.body.order.id).toBe(orderId);
    expect(statusResponse.body.order.totalAmount).toBe(500);
  });
});
```

## Environment Variables
```bash
# .env
HWANAN_MERCHANT_ID=your_merchant_id
HWANAN_TERMINAL_ID=your_terminal_id
HWANAN_MER_ID=your_mer_id
HWANAN_MERCHANT_NAME=Your Store Name
HWANAN_IDENTIFIER=your_identifier
```

## Best Practices

### Security
- Store all sensitive credentials in environment variables
- Use HTTPS for all production communications
- Validate all incoming webhook data
- Implement proper logging without exposing sensitive information
- Monitor for suspicious transaction patterns

### Error Handling  
- Log all payment events for debugging and compliance
- Implement proper retry mechanisms for network failures
- Provide clear error messages to users
- Handle bank response codes appropriately
- Implement timeout handling for long-running operations

### Performance
- Cache merchant configuration when possible
- Implement connection pooling for high-volume scenarios
- Monitor payment gateway response times
- Use appropriate timeout settings for bank communications
- Implement circuit breaker patterns for resilience

### User Experience
- Provide clear payment flow instructions
- Display accurate processing times
- Implement proper loading states during payment
- Offer customer support contact information
- Ensure mobile-responsive payment interfaces

### Compliance
- Follow PCI DSS guidelines for payment processing
- Implement proper audit trails for all transactions
- Ensure data encryption in transit and at rest
- Maintain compliance with Taiwan banking regulations
- Regular security assessments and updates

## Troubleshooting

### Common Issues
1. **Invalid Merchant Configuration**: Verify all merchant credentials
2. **Connection Timeout**: Check network connectivity to HwaNan servers
3. **Invalid Amount**: Ensure amounts meet minimum/maximum requirements
4. **Webhook Not Receiving**: Verify callback server is accessible
5. **Order Not Found**: Check order ID format and timing

### Debug Mode
```typescript
// Enable detailed logging
const payment = new HwaNanPayment({
  // ... configuration
  debug: true, // If supported
  logLevel: 'verbose'
});
```

## Related Packages
- `@rytass/payments` - Core payment framework
- `@rytass/payments-nestjs-module` - NestJS integration module
- Other payment adapters: ECPay, NewebPay, CTBC, iCash Pay, Happy Card

## Support
- GitHub Issues: https://github.com/Rytass/Utils/issues
- Documentation: Package README and TypeScript definitions
- Community: Taiwan payment processing developers
- HwaNan Bank Support: Contact your HwaNan account manager for technical issues